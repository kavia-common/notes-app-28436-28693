{"is_source_file": true, "format": "Python", "description": "This file defines the API routes for handling 'notes' in a FastAPI application. It includes endpoints for listing, creating, retrieving, updating, deleting notes, and also for generating and retrieving summaries associated with notes. The routes are protected and verify user ownership of notes. The file uses SQLAlchemy for database operations and interacts with a summarization service.", "external_files": ["app.core.security", "app.db.session", "app.models.note", "app.models.summary", "app.schemas.note", "app.schemas.summary", "app.services.summarization_client"], "external_methods": ["get_preview_or_current_user", "get_session", "Note.model_validate", "SummaryRead.model_validate", "SummarizationClient.summarize"], "published": ["router"], "classes": [], "methods": [{"name": "List[NoteRead] list_notes( session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )", "description": "Lists all notes for the authenticated user.", "scope": "", "scopeKind": ""}, {"name": "NoteRead create_note( payload: NoteCreate, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )", "description": "Creates a new note for the current user.", "scope": "", "scopeKind": ""}, {"name": "NoteRead get_note( id: int, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )", "description": "Retrieves a specific note by ID, ensuring ownership.", "scope": "", "scopeKind": ""}, {"name": "NoteRead update_note( id: int, payload: NoteUpdate, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )", "description": "Updates the title and content of a user's note.", "scope": "", "scopeKind": ""}, {"name": "None delete_note( id: int, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )", "description": "Deletes a user's note.", "scope": "", "scopeKind": ""}, {"name": "SummaryRead get_note_summary( id: int, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )", "description": "Retrieves the stored summary for a specific note.", "scope": "", "scopeKind": ""}, {"name": "dict summarize_note( id: int, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )", "description": "Generates and stores a summary for the note using an AI service.", "scope": "", "scopeKind": ""}], "calls": ["session.execute", "Note.model_validate", "SummaryRead.model_validate", "SummarizationClient().summarize", "session.add", "session.commit", "session.refresh", "session.delete"], "search-terms": ["FastAPI notes routes", "CRUD for notes", "note summarization", "user-owned notes", "async SQLAlchemy", "summarization endpoint", "note summaries"], "state": 2, "file_id": 7, "knowledge_revision": 68, "git_revision": "71a154805c5cecaadde29c6140eaa08f16d3b718", "revision_history": [{"15": ""}, {"53": "ce6636720be27aa04dedd08d8cd1a57d34dabf5b"}, {"61": "ce6636720be27aa04dedd08d8cd1a57d34dabf5b"}, {"62": "ce6636720be27aa04dedd08d8cd1a57d34dabf5b"}, {"68": "71a154805c5cecaadde29c6140eaa08f16d3b718"}], "ctags": [{"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/notes-app-28436-28693/BackendAPIContainer/src/app/api/routes/notes.py", "pattern": "/^async def create_note($/", "language": "Python", "typeref": "typename:NoteRead", "kind": "function", "signature": "( payload: NoteCreate, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/notes-app-28436-28693/BackendAPIContainer/src/app/api/routes/notes.py", "pattern": "/^async def delete_note($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( id: int, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/notes-app-28436-28693/BackendAPIContainer/src/app/api/routes/notes.py", "pattern": "/^async def get_note($/", "language": "Python", "typeref": "typename:NoteRead", "kind": "function", "signature": "( id: int, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )"}, {"_type": "tag", "name": "get_note_summary", "path": "/home/kavia/workspace/code-generation/notes-app-28436-28693/BackendAPIContainer/src/app/api/routes/notes.py", "pattern": "/^async def get_note_summary($/", "language": "Python", "typeref": "typename:SummaryRead", "kind": "function", "signature": "( id: int, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/notes-app-28436-28693/BackendAPIContainer/src/app/api/routes/notes.py", "pattern": "/^async def list_notes($/", "language": "Python", "typeref": "typename:List[NoteRead]", "kind": "function", "signature": "( session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/notes-app-28436-28693/BackendAPIContainer/src/app/api/routes/notes.py", "pattern": "/^router = APIRouter()$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "summarize_note", "path": "/home/kavia/workspace/code-generation/notes-app-28436-28693/BackendAPIContainer/src/app/api/routes/notes.py", "pattern": "/^async def summarize_note($/", "language": "Python", "typeref": "typename:dict", "kind": "function", "signature": "( id: int, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/notes-app-28436-28693/BackendAPIContainer/src/app/api/routes/notes.py", "pattern": "/^async def update_note($/", "language": "Python", "typeref": "typename:NoteRead", "kind": "function", "signature": "( id: int, payload: NoteUpdate, session: AsyncSession = Depends(get_session), user=Depends(get_preview_or_current_user), )"}], "hash": "b8cc9eb010165117d47ef3cf55dfcb24", "format-version": 4, "code-base-name": "BackendAPIContainer", "filename": "BackendAPIContainer/src/app/api/routes/notes.py", "fields": [{"name": "router = APIRouter()", "scope": "", "scopeKind": "", "description": "unavailable"}]}